/****************************************************************************
// Declarative Jenkinsfile for the lambda infrastructure
******************************************************************************/
pipeline {
	agent any

	parameters {
//		choice(name: 'workspace', choices:['uat', 'prod'], description: 'Workspace/environment file to use for deployment')
		booleanParam(name: 'destroy', defaultValue: false, description: 'Destroy Terraform build?')
		booleanParam(name: 'publishNewVersion', defaultValue: false, description: 'Publish new version of lambda function?')
	}

	environment {
		BITBUCKET_REPO = 'git@bitbucket.org:jiang_ren/terraform-configuration.git'
		WORKSPACE_PATH = '/var/jenkins_home/workspace/terraform'
		AWS_ACCESS_KEY_ID     = credentials('JR_PROD_AWS_ACCESS_KEY_ID')
		AWS_SECRET_ACCESS_KEY = credentials('JR_PROD_AWS_SECRET_ACCESS_KEY')		
	}

	options {
		// Keep maximum 10 archievd artifacts
		buildDiscarder(logRotator(numToKeepStr:'10', artifactNumToKeepStr:'10'))
		// No simultaneous builds
		disableConcurrentBuilds()
		durabilityHint('MAX_SURVIVABILITY') // PERFORMANCE_OPTIMIZED or SURVIVABLE_NONATOMIC
	}

	stages {

		stage('Terraform Init') {
			steps {
				dir("applications/ImageProcessor"){
					sh "pwd"
					withVault(configuration: [timeout: 60, vaultCredentialId: 'Vault Credential', vaultUrl: 'https://vault.jiangren.com.au'], vaultSecrets: [[path: 'secret_aws/aws_uat', secretValues: [[vaultKey: 'AWS_ACCESS_KEY_ID'], [vaultKey: 'AWS_SECRET_ACCESS_KEY']]]]) {
						ansiColor('vga'){
							sh "terraform  init"
						}
					}	
				}
			}
		}

		stage('Terraform Apply') {
			when {
				not {
					equals expected: true, actual: params.destroy
				}
			}
			steps {
				dir("applications/ImageProcessor"){
					sh "pwd"
					withVault(configuration: [timeout: 60, vaultCredentialId: 'Vault Credential', vaultUrl: 'https://vault.jiangren.com.au'], vaultSecrets: [[path: 'secret_aws/aws_uat', secretValues: [[vaultKey: 'AWS_ACCESS_KEY_ID'], [vaultKey: 'AWS_SECRET_ACCESS_KEY']]]]) {
						ansiColor('vga'){
							sh "terraform apply -var 'publish_new_version=${params.publishNewVersion}' --var-file=imageprocessor.tfvars --auto-approve"
						}						
					}
					
				}
			}
		}

		stage('Destroy') {
			when {
					equals expected: true, actual: params.destroy
			}

			steps {
				dir("applications/ImageProcessor"){
					sh "pwd"			
					withVault(configuration: [timeout: 60, vaultCredentialId: 'Vault Credential', vaultUrl: 'https://vault.jiangren.com.au'], vaultSecrets: [[path: 'secret_aws/aws_uat', secretValues: [[vaultKey: 'AWS_ACCESS_KEY_ID'], [vaultKey: 'AWS_SECRET_ACCESS_KEY']]]]) {
						ansiColor('xterm'){
							sh "terraform destroy  --var-file=imageprocessor.tfvars --auto-approve"
						}		
					}
				}
			}
		}
	}
	post {
		always {
			//clean workspace
			cleanWs()
		}
		success {
			bitbucketStatusNotify(buildState: 'SUCCESSFUL')
			echo 'Success.'
		}
		failure {
			bitbucketStatusNotify(buildState: 'FAILED')
			echo 'Failure.'
		}
	}
}